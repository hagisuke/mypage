https://speakerdeck.com/joisino
https://theory-and-me.hatenablog.com/entry/2021/05/09/181435
・通常Diceで曖昧クラス同士でラベルスムーシング
・通常Dice＜3クラス統合Dice
・シンクホーンロス
import numpy as np

n, m = 5, 5
C = np.array([
    [0, 2, 2, 2, 2],
    [2, 0, 1, 2, 2],
    [2, 1, 0, 2, 2],
    [2, 2, 2, 0, 1],
    [2, 2, 2, 1, 0]])
a = np.array([[
    [0.2, 0.4, 0.2, 0.1, 0.1],
    [0.4, 0.2, 0.2, 0.1, 0.1],
    [0.2, 0.2, 0.4, 0.1, 0.1]]]) #pred
b = np.array([[
    [0.2, 0.2, 0.4, 0.1, 0.1],
    [0.2, 0.2, 0.4, 0.1, 0.1],
    [0.2, 0.2, 0.4, 0.1, 0.1]]]) #true

eps = 0.2
K = np.exp(- C / eps)

u = np.ones((1, 3, n))
for i in range(100):
    v = b / (u @ K)
    u = a / (v @ K.T)

#f = eps * np.log(u + 1e-9)
#g = eps * np.log(v + 1e-9)

P = u.reshape(1, 3, n, 1) * K * v.reshape(1, 3, 1, m)
loss = np.sum(C * P, axis=(2,3))
print('loss:', loss)



import tensorflow as tf

#y_pred, y_true: (bs, h, c)
y_pred = tf.constant([[
    [0.2, 0.4, 0.2, 0.1, 0.1],
    [0.4, 0.2, 0.2, 0.1, 0.1],
    [0.2, 0.2, 0.4, 0.1, 0.1]]])
y_true = tf.constant([[
    [0.2, 0.2, 0.4, 0.1, 0.1],
    [0.2, 0.2, 0.4, 0.1, 0.1],
    [0.2, 0.2, 0.4, 0.1, 0.1]]])

C = tf.constant([
    [0, 2, 2, 2, 2],
    [2, 0, 1, 2, 2],
    [2, 1, 0, 2, 2],
    [2, 2, 2, 0, 1],
    [2, 2, 2, 1, 0]], tf.float32)

eps = 0.2
K = tf.math.exp(- C / eps)

u = tf.ones_like(y_pred)
for i in range(100):
    v = y_true / tf.matmul(u, K) #tf.tensordot(u, K, axes=[2, 0])
    u = y_pred / tf.matmul(v, tf.transpose(K)) #tf.tensordot(v, tf.transpose(K), axes=[2, 0])

#f = eps * tf.math.log(u + 1e-9)
#g = eps * tf.math.log(v + 1e-9)

P = tf.expand_dims(u, axis=-1) * K * tf.expand_dims(v, axis=-2)
loss = tf.math.reduce_sum(C * P, axis=(2,3))
print('loss:', loss)